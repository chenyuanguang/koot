const fs = require('fs-extra');
const path = require('path');
const getCwd = require('koot/utils/get-cwd');
const resolveDir = require('koot/utils/resolve-dir');

const gitIgnore = `
# Logs
*.log
npm-debug.log*

# Runtime data
pids
*.pid
*.seed

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage

# nyc test coverage
.nyc_output

# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# node-waf configuration
.lock-wscript

# Compiled binary addons (http://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules
jspm_packages

# Optional npm cache directory
.npm

# Optional REPL history
.node_repl_history

# Personal code

.DS_Store
.vscode
`;
const packageJson = {
    name: '',
    main: 'index.js',
    scripts: {
        start: 'node index.js'
    },
    license: 'UNLICENSED',
    private: true,
    dependencies: {}
};

/**
 * 扩展并过滤打包结果目录下的 package.json 的依赖项
 * @async
 * @param {Object} dependencies
 * @returns {Object} 过滤后的依赖项列表对象
 */
const extendAndFilterDistPackageDependencies = async (dependencies = {}) => {
    // 如果传入的是 package.json 内容对象
    if (dependencies && dependencies.name && dependencies.dependencies) {
        dependencies.dependencies = await extendAndFilterDistPackageDependencies(
            dependencies.dependencies
        );
        return dependencies;
    }

    /** 过滤项，满足条件的依赖将被移除 */
    const ignores = [/^koot$/, /^koot-webpack$/, /^@types\//];
    if (process.env.KOOT_SERVER_MODE === 'serverless') {
        ignores.push(/^pm2$/);
    }

    /** koot module 所属目录 */
    const packageKoot = await fs.readJson(
        path.resolve(resolveDir('koot'), 'package.json')
    );

    // 将 koot 的依赖添加到 dependencies
    Object.assign(dependencies, packageKoot.dependencies);

    // 处理过滤
    Object.keys(dependencies).forEach(dep => {
        if (ignores.some(regex => regex.test(dep))) delete dependencies[dep];
    });

    return dependencies;
};

module.exports = async (o = {}) => {
    const { dist } = o;

    /** 项目目录 */
    const cwd = getCwd();
    /** 项目的 package.json 文件 */
    const packageProject = await fs.readJson(path.resolve(cwd, 'package.json'));
    /** 当前是否是测试模式 */
    const kootTest = JSON.parse(process.env.KOOT_TEST_MODE);

    /** 打包目录中的 package.json 内容对象 */
    const pkg = Object.assign({}, packageJson, {
        name: `${packageProject.name}-server`,
        dependencies: await extendAndFilterDistPackageDependencies(
            packageProject.dependencies
        )
    });

    // 复制 ./files 下的所有文件到打包结果目录
    await fs.copy(path.resolve(__dirname, 'files'), dist, {
        overwrite: true
    });

    // 写入 gitignore
    await fs.writeFile(path.resolve(dist, './.gitignore'), gitIgnore, 'utf-8');

    // 写入 package.json
    await fs.writeJson(path.resolve(dist, 'package.json'), pkg, {
        spaces: 4
    });

    if (kootTest) {
        Object.assign(pkg, packageJson, {
            devDependencies: packageProject.devDependencies || {}
        });
        if (/file:/.test(pkg.dependencies.koot)) {
            pkg.dependencies.koot = pkg.dependencies.koot.replace(
                /file:/,
                'file:../'
            );
        }
        await fs.writeJson(path.resolve(dist, 'package.json'), pkg);
    }
};
